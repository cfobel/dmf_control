#!/usr/bin/python

# scons script for the Arduino sketch

import re

from arduino_build import ArduinoBuildContext


Import('SOFTWARE_VERSION')
Import('HARDWARE_MAJOR_VERSION')
Import('HARDWARE_MINOR_VERSION')

versions = ((1, 0), (1, 1), (1, 2), (1, 3), (2, 0))
#versions = ((2, 0),)
hybrid_sources = re.split(r'\s+', 'dmf_control_board.cpp RemoteObject.cpp')

arduino_hexes = {}
for major, minor in versions:
    version_str = '%s_%s' % (major, minor)
    context = ArduinoBuildContext(ARGUMENTS,
            build_root='../build/arduino__%s' % version_str)
    version_match = (int(HARDWARE_MAJOR_VERSION) == int(major) and \
                     int(HARDWARE_MINOR_VERSION) == int(minor))
    arduino_hex = context.build(env_dict={'CPPDEFINES': {
            '___SOFTWARE_VERSION___': '\\"%s\\"' % SOFTWARE_VERSION,
            '___HARDWARE_MAJOR_VERSION___': major,
            '___HARDWARE_MINOR_VERSION___': minor}}, 
            extra_sources=hybrid_sources, register_upload=version_match)
    arduino_hexes[version_str] = arduino_hex

arduino_hex = sorted([(k, v) for k, v in arduino_hexes.items()])[-1][1]

Export('arduino_hex')
Export('arduino_hexes')

# vim: et sw=4 fenc=utf-8:
